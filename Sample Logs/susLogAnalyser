import tkinter as tk
from tkinter import ttk, filedialog, messagebox, simpledialog
from tkinter import *
import re
import matplotlib.pyplot as plt
from collections import defaultdict
import json
import os

patterns = {
    'malware': re.compile(r'malware|virus|trojan|ransomware', re.IGNORECASE),
    'file_tampering': re.compile(r'file tampering|unauthorized file modification', re.IGNORECASE),
    'unauthorized_access': re.compile(r'unauthorized access|login failure|invalid login|access denied', re.IGNORECASE),
    'security_breach': re.compile(r'security breach|data breach|intrusion detected|unauthorized entry', re.IGNORECASE),
    'advanced_malware': re.compile(r'zero-day|advanced persistent threat|rootkit', re.IGNORECASE),
    'phishing': re.compile(r'phishing|spear phishing|fraudulent email', re.IGNORECASE),
    'data_leakage': re.compile(r'data leakage|data exfiltration|information leak', re.IGNORECASE)
}

remedies = {
    'malware': "",
    'file_tampering': "",
    'unauthorized_access': "",
    'security_breach': "",
    'advanced_malware': "",
    'phishing': "",
    'data_leakage': ""
}

config_file = 'log_analyzer_config.json'

def save_patterns():
    config = {}
    with open(config_file, 'w') as f:
        json.dump(config, f, indent=4)


def analyze_log_file(log_file):
    suspicious_activity = defaultdict(int)
    total_lines = 0
    with open(log_file, 'r') as f:
        for line in f:
            total_lines += 1
            try:
                for activity, pattern in patterns.items():
                    if pattern.search(line):
                        suspicious_activity[activity] += 1
            except Exception as e:
                pass
    return suspicious_activity, total_lines


def save_report(log_file, suspicious_activity, total_lines):
    report_file = log_file.replace('.log', '_output.txt')
    with open(report_file, 'w') as f:
        f.write(f'Total lines processed: {total_lines}\n\n')
        if suspicious_activity:
            for activity, count in suspicious_activity.items():
                f.write(f'{activity}: {count}\n')
                f.write(f'{remedies[activity]}\n\n')
        else:
            f.write('No suspicious activity detected.\n')
    return report_file


def plot_suspicious_activity(log_file, suspicious_activity):
    if not suspicious_activity:
        return None

    activities = list(suspicious_activity.keys())
    counts = list(suspicious_activity.values())

    fig, ax = plt.subplots(figsize=(10, 5))
    ax.bar(activities, counts, color='red')
    ax.set_xlabel('Activity Type')
    ax.set_ylabel('Count')
    ax.set_title('Suspicious Activity Detected in Logs')

    graph_file = log_file.replace('.log', '_suspicious_activity.png')
    fig.savefig(graph_file)
    plt.close(fig)
    return graph_file


def run_analysis():
    log_file = filedialog.askopenfilename(title="Select Log File", filetypes=[("Log Files", "*.log")])
    if not log_file:
        return

    suspicious_activity, total_lines = analyze_log_file(log_file)
    report_file = save_report(log_file, suspicious_activity, total_lines)
    graph_file = plot_suspicious_activity(log_file, suspicious_activity)

    result_message = f"Analysis complete!\nReport saved to: {report_file}"
    if graph_file:
        result_message += f"\nGraph saved to: {graph_file}"
        display_graph(graph_file)

    if suspicious_activity:
        alert_message = "Suspicious activity detected!"
        messagebox.showwarning("Alert", alert_message)

    messagebox.showinfo("Analysis Complete", result_message)
    update_analysis_results(suspicious_activity, total_lines)

def display_graph(graph_file):
    img = tk.PhotoImage(file=graph_file)
    img_label.config(image=img)
    img_label.image = img

def update_analysis_results(suspicious_activity, total_lines):
    for widget in analysis_results_frame.winfo_children():
        widget.destroy()

    tk.Label(analysis_results_frame, text=f"Total lines processed: {total_lines}", font=("Helvetica", 12)).pack(pady=5)

    if suspicious_activity:
        for activity, count in suspicious_activity.items():
            tk.Label(analysis_results_frame, text=f'{activity}: {count}', font=("Helvetica", 12)).pack(pady=2)
            tk.Label(analysis_results_frame, text=f'{remedies[activity]}', font=("Helvetica", 10)).pack(pady=2)
    else:
        tk.Label(analysis_results_frame, text='No suspicious activity detected.', font=("Helvetica", 12)).pack(pady=5)

def create_gui():
    global root, tab_analysis, tab_custom_patterns, analysis_results_frame, img_label

    print("Creating GUI...")
    root = tk.Tk()
    root.title("Log Analyzer")
    root.geometry("1200x1500")

    tab_control = ttk.Notebook(root)
    tab_analysis = ttk.Frame(tab_control)
    tab_custom_patterns = ttk.Frame(tab_control)

    tab_control.add(tab_analysis, text='Log Analysis')
    tab_control.add(tab_custom_patterns, text='Custom Patterns')
    tab_control.pack(expand=1, fill='both')

    tk.Label(tab_analysis, text="Log Analyzer Tool", font=("Helvetica", 16)).pack(pady=10)
    tk.Button(tab_analysis, text="Select Log File and Scan", command=run_analysis, font=("Helvetica", 12)).pack(pady=10)

    analysis_results_frame = ttk.Frame(tab_analysis)
    analysis_results_frame.pack(pady=10, padx=10, fill='both', expand=True)

    img_label = tk.Label(tab_analysis)
    img_label.pack(pady=10)

    tk.Label(tab_custom_patterns, text="Custom Pattern Management", font=("Helvetica", 16)).pack(pady=10)

    print("Starting main loop...")
    root.mainloop()


if __name__ == '__main__':
    create_gui()
    print("GUI created.")
